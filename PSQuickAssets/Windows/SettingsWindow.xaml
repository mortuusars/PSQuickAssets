<pureUI:PureWindow x:Class="PSQuickAssets.Windows.SettingsWindow"
                   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                   xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                   xmlns:pureUI="clr-namespace:PureUI;assembly=PureUI"
                   xmlns:pureUIcommands="clr-namespace:PureUI.Commands;assembly=PureUI"
                   xmlns:local="clr-namespace:PSQuickAssets.Windows"
                   xmlns:system="clr-namespace:System;assembly=mscorlib"
                   xmlns:core="clr-namespace:PSQA.Core;assembly=PSQA.Core"
                   xmlns:vm="clr-namespace:PSQuickAssets.ViewModels"
                   xmlns:lex="http://wpflocalizeextension.codeplex.com"
                   xmlns:controls="clr-namespace:PSQuickAssets.Controls"
                   xmlns:hotkeys="clr-namespace:MGlobalHotkeys.WPF;assembly=MGlobalHotkeys.WPF"
                   xmlns:pureUIcontrols="clr-namespace:PureUI.Controls;assembly=PureUI"
                   lex:LocalizeDictionary.DesignCulture="en"
                   lex:ResxLocalizationProvider.DefaultAssembly="PSQuickAssets"
                   lex:ResxLocalizationProvider.DefaultDictionary="Lang"
                   mc:Ignorable="d"
                   Title="{lex:Loc Settings_WindowTitle}"
                   Width="750"
                   MinWidth="480"
                   Height="520"
                   MinHeight="200"
                   d:WindowStyle="None"
                   d:BorderThickness="0"
                   FontFamily="{StaticResource FontLight}"
                   Foreground="{DynamicResource Brushes.Foreground.1}"
                   DataContext="{Binding SettingsViewModel, Source={StaticResource ViewModelLocator}}"
                   d:DataContext="{d:DesignInstance Type=vm:SettingsViewModel}"
                   xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <pureUI:PureWindow.Resources>

        <Style TargetType="{x:Type TabControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot"
                              ClipToBounds="true"
                              SnapsToDevicePixels="true"
                              KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0" />
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                                <RowDefinition x:Name="RowDefinition1" Height="*" />
                            </Grid.RowDefinitions>

                            <TabPanel x:Name="headerPanel"
                                      Background="Transparent"
                                      Grid.Column="0"
                                      IsItemsHost="true"
                                      Grid.Row="0"
                                      Margin="0 -2 0 0"
                                      KeyboardNavigation.TabIndex="1"
                                      Panel.ZIndex="1" />

                            <Border x:Name="contentPanel"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Grid.Column="0"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    Grid.Row="1"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local">

                                <ScrollViewer>
                                    <ContentPresenter x:Name="PART_SelectedContentHost"
                                                      ContentSource="SelectedContent"
                                                      Margin="{TemplateBinding Padding}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.6" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2"
                                   StrokeDashArray="1 2"
                                   Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   SnapsToDevicePixels="true"
                                   StrokeThickness="1" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
            <Setter Property="FontSize" Value="15" />
            <Setter Property="FontFamily" Value="{StaticResource FontRegular}" />
            <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
            <Setter Property="Background" Value="{DynamicResource Brushes.Background.1}" />
            <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Border.1}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Padding" Value="13 10 32 10" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder"
                                    Margin="0 2"
                                    CornerRadius="6"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                            <ContentPresenter x:Name="contentPresenter"
                                              ContentSource="Header"
                                              Margin="{TemplateBinding Padding}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                        </Grid>

                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Background.2}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.0}" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Background.4}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.0}" />
                                <!--<Setter Property="Background" Value="{DynamicResource Brushes.Accent.Background.0}"/>
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Accent.Foreground.0}"/>-->
                            </DataTrigger>
                        </ControlTemplate.Triggers>

                        <!--<ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="-2,-2,0,-2" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="-2,0,-2,-2" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="0,-2,-2,-2" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="-2,-2,-2,0" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>-->
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="CategoryHeader" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0 0 0 4" />
        </Style>

        <Style TargetType="{x:Type controls:ContentSettingItem}">
            <Setter Property="Background" Value="{DynamicResource Brushes.Background.2}" />
            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Control}}" />
        </Style>

        <Style TargetType="{x:Type controls:ToggleSettingItem}">
            <Setter Property="Background" Value="{DynamicResource Brushes.Background.2}" />
            <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Control}}" />
        </Style>

        <!--  COMBOBOX ITEM STYLE  -->
        <Style TargetType="ComboBoxItem">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border x:Name="Border" SnapsToDevicePixels="True">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource Brushes.Background.4}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <ContentPresenter Margin="10 8" />
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Colors.Accent.Background.0}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="SelectedUnfocused">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource Colors.Accent.Background.0}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  COMBOBOX STYLE  -->
        <Style x:Key="ProperComboBox" TargetType="ComboBox">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Border x:Name="root" MinWidth="50">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="CornerRadius" Value="4" />
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                            <Setter Property="CornerRadius" Value="4 4 0 0" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=toggleButton}" Value="true">
                                            <Setter Property="Background" Value="{DynamicResource Brushes.Background.4}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>

                                <!--  ARROW ICON  -->
                                <Viewbox Grid.Column="1"
                                         VerticalAlignment="Center"
                                         HorizontalAlignment="Center"
                                         Height="7"
                                         Margin="8"
                                         RenderTransformOrigin="0.5, 0.5">
                                    <Viewbox.RenderTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <ScaleTransform ScaleX="1" ScaleY="1" x:Name="scale" />
                                                <RotateTransform Angle="0" x:Name="rotate" />
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Viewbox.RenderTransform>
                                    <Viewbox.Style>
                                        <Style TargetType="Viewbox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsMouseOver, ElementName=root}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                                                 To="1.2" />
                                                                <DoubleAnimation Duration="0:0:0"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                                                 To="1.2" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                    <DataTrigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                                                 To="1" />
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                                                 To="1" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.ExitActions>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[1].Angle"
                                                                                 To="180" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                    <DataTrigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[1].Angle"
                                                                                 To="0" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.ExitActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Viewbox.Style>
                                    <Path Data="M24 30.8 12 18.8 14.15 16.65 24 26.5 33.85 16.65 36 18.8Z"
                                          Fill="{DynamicResource Brushes.Foreground.1}"
                                          Stretch="Fill"
                                          UseLayoutRounding="False" />
                                </Viewbox>

                                <!--  SELECTED ITEM  -->
                                <ContentPresenter Content="{TemplateBinding SelectedItem}"
                                                  ContentTemplate="{TemplateBinding ItemTemplate}"
                                                  IsHitTestVisible="False"
                                                  Margin="{TemplateBinding Padding}" />

                                <ToggleButton IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              x:Name="toggleButton"
                                              Grid.ColumnSpan="2"
                                              Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                              VerticalAlignment="Stretch"
                                              HorizontalAlignment="Stretch">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Grid Background="Transparent" />
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>

                                <Popup x:Name="PART_Popup"
                                       IsOpen="{TemplateBinding IsDropDownOpen}"
                                       Focusable="False"
                                       AllowsTransparency="True"
                                       PopupAnimation="Slide"
                                       Placement="Bottom">

                                    <Grid x:Name="DropDown"
                                          SnapsToDevicePixels="True"
                                          MinWidth="{TemplateBinding ActualWidth}"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">

                                        <Grid.OpacityMask>
                                            <VisualBrush Visual="{Binding ElementName=DropDownBorder}" />
                                        </Grid.OpacityMask>
                                        <Border x:Name="DropDownBorder"
                                                Background="{DynamicResource Brushes.Background.3}"
                                                CornerRadius="0 0 4 4"
                                                VerticalAlignment="Stretch"
                                                HorizontalAlignment="Stretch" />

                                        <ScrollViewer SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5" />
                </Trigger>
            </Style.Triggers>
        </Style>


        <!--  MASK MODE VALUES PROVIDER  -->
        <ObjectDataProvider x:Key="MaskModeValues"
                            MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="core:MaskMode" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

    </pureUI:PureWindow.Resources>

    <pureUI:PureWindow.Style>
        <Style TargetType="pureUI:PureWindow" BasedOn="{StaticResource PSQAWindow}" />
    </pureUI:PureWindow.Style>

    <pureUI:PureWindow.InputBindings>
        <KeyBinding Key="Esc" Command="{x:Static pureUIcommands:WindowCommands.CloseWindow}" />
    </pureUI:PureWindow.InputBindings>

    <Grid>
        <!--  TITLE PREVIEW  -->
        <d:Border Background="{StaticResource Brushes.Border.0}"
                  VerticalAlignment="Top"
                  Margin="0 -32 0 0">
            <ContentPresenter Content="{StaticResource ToolTitleContent}" />
        </d:Border>

        <TabControl Background="Transparent"
                    BorderThickness="0"
                    TabStripPlacement="Left"
                    Padding="30 5"
                    Margin="15 15 2 0"
                    Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Control}}">

            <!--  GENERAL  -->
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <pureUIcontrols:FontIcon Icon="&#xE713;" Margin="0 0 8 0" />
                        <TextBlock Text="{lex:Loc Settings_General}" />
                    </StackPanel>
                </TabItem.Header>

                <StackPanel>

                    <!--  WINDOW  -->
                    <TextBlock Text="{lex:Loc Settings_Category_Window}" Style="{StaticResource CategoryHeader}" />

                    <!--  WINDOW HOTKEY  -->
                    <controls:ContentSettingItem Header="{lex:Loc Settings_WindowOpenHotkey}">
                        <controls:ContentSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xEDA7;" Size="20" />
                        </controls:ContentSettingItem.Icon>

                        <Border BorderThickness="1"
                                CornerRadius="3"
                                Padding="0"
                                VerticalAlignment="Center">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Foreground.3}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>

                            <Grid>
                                <Border CornerRadius="2"
                                        Margin="0"
                                        Background="{DynamicResource Brushes.Overlay.0}">
                                    <Border.Effect>
                                        <DropShadowEffect BlurRadius="10"
                                                          ShadowDepth="1"
                                                          Direction="-90"
                                                          Opacity="1" />
                                    </Border.Effect>
                                </Border>
                                <hotkeys:HotkeyPicker MinWidth="110"
                                                      Padding="8 5"
                                                      FontSize="13"
                                                      Margin="-2"
                                                      BorderThickness="2"
                                                      ClearFocusOnCancel="True"
                                                      ClearFocusOnClear="True"
                                                      CornerRadius="3"
                                                      IsTabStop="False"
                                                      Background="{DynamicResource Brushes.Background.3}"
                                                      Hotkey="{Binding ShowHideWindowHotkey, UpdateSourceTrigger=LostFocus}"
                                                      ToolTip="{lex:Loc Settings_HotkeyPicker_Tooltip}" />
                            </Grid>
                        </Border>
                    </controls:ContentSettingItem>

                    <!--  ALWAYS ON TOP  -->
                    <controls:ToggleSettingItem Header="{lex:Loc Settings_AlwaysOnTop}"
                                                Description="{lex:Loc Settings_AlwaysOnTop_Tooltip}"
                                                IsChecked="{Binding Config.AlwaysOnTop}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xEE3F;" Size="18" />
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>

                    <!--  HIDE WINDOW WHEN ADDING  -->
                    <controls:ToggleSettingItem Header="{lex:Loc Settings_HideWindowWhenAdding}" IsChecked="{Binding Config.HideWindowWhenAddingAsset}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xEBFC;" Size="18" />
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>

                    <!--  HIDE FROM TASKBAR  -->
                    <controls:ToggleSettingItem Header="{lex:Loc Settings_HideFromTaskbar}"
                                                Description="{lex:Loc Settings_HideFromTaskbar_Tooltip}"
                                                IsChecked="{Binding Config.HideIconFromTaskbar}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xE8F9;" Size="18" />
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>


                    <Separator Margin="10" Opacity="0" />


                    <!--  APPLICATION  -->
                    <TextBlock Text="{lex:Loc Settings_Category_Application}" Style="{StaticResource CategoryHeader}" />

                    <controls:ToggleSettingItem Header="{lex:Loc Settings_CheckUpdates}" IsChecked="{Binding Config.CheckUpdates}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xECC5;" Size="18" />
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>

                    <controls:ToggleSettingItem Header="{lex:Loc Settings_DebugMode}"
                                                Description="{lex:Loc Settings_DebugMode_Tooltip}"
                                                IsChecked="{Binding Config.DebugMode}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xE9F5;" Size="18" />
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>
                </StackPanel>

            </TabItem>

            <!--  APPEARANCE  -->
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <pureUIcontrols:FontIcon Icon="&#xE771;" Margin="0 0 8 0" />
                        <TextBlock Text="{lex:Loc Settings_Appearance}" />
                    </StackPanel>
                </TabItem.Header>

                <!--  THEME  -->
                <controls:ContentSettingItem Header="{lex:Loc Settings_Theme}">
                    <controls:ContentSettingItem.Icon>
                        <pureUIcontrols:FontIcon Icon="&#xE243;"
                                                 Size="18"
                                                 FontFamily="{StaticResource MaterialIcons}" />
                    </controls:ContentSettingItem.Icon>

                    <ComboBox Style="{StaticResource ProperComboBox}"
                              Padding="12 6"
                              Background="{DynamicResource Brushes.Background.3}"
                              ItemsSource="{Binding Themes}"
                              SelectedItem="{Binding CurrentTheme, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              SelectedIndex="0">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <!--  DARK LIGHT ICON  -->
                                    <TextBlock FontFamily="{StaticResource MaterialIcons}"
                                               Foreground="{DynamicResource Brushes.Foreground.1}"
                                               Margin="0 1 8 0"
                                               VerticalAlignment="Center"
                                               Visibility="{Binding Text.Length, RelativeSource={RelativeSource Self}, Converter={pureUI:ValueToVisibilityConverter Value=0}}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Name}" Value="Dark">
                                                        <Setter Property="Text" Value="&#xE3A7;" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Name}" Value="Light">
                                                        <Setter Property="Text" Value="&#xE430;" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <!--  THEME NAME  -->
                                    <TextBlock Text="{Binding Name}" Foreground="{DynamicResource Brushes.Foreground.1}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </controls:ContentSettingItem>
            </TabItem>

            <!--  ASSETS  -->
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                        <pureUIcontrols:FontIcon Icon="&#xE3F4;"
                                                 Margin="0 0 8 0"
                                                 FontFamily="{StaticResource MaterialIcons}" />
                        <TextBlock Text="{lex:Loc Settings_Assets}" />
                    </StackPanel>
                </TabItem.Header>

                <StackPanel>
                    <!--  ADD MASK TO LAYER  -->
                    <controls:ToggleSettingItem Header="{lex:Loc Settings_AddMaskToLayer}"
                                                IsChecked="{Binding Config.AddMaskToAddedLayer}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xE3DB;"
                                                     FontFamily="{StaticResource MaterialIcons}"
                                                     Size="26" />
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>

                    <!--  MASK MODE  -->
                    <controls:ContentSettingItem Header="{lex:Loc Settings_MaskMode}"
                                                 Margin="10 0 0 4"
                                                 IsEnabled="{Binding Config.AddMaskToAddedLayer}">
                        <controls:ContentSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xE3F1;"
                                                     Size="20"
                                                     FontFamily="{StaticResource MaterialIcons}" />
                        </controls:ContentSettingItem.Icon>
                        <ComboBox Style="{StaticResource ProperComboBox}"
                                  Background="{DynamicResource Brushes.Background.3}"
                                  Foreground="{DynamicResource Brushes.Foreground.1}"
                                  ItemsSource="{Binding Source={StaticResource MaskModeValues}}"
                                  SelectedItem="{Binding Config.MaskMode}"
                                  d:SelectedItem="{x:Static core:MaskMode.RevealSelection}"
                                  Padding="8">
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type core:MaskMode}">
                                    <StackPanel Orientation="Horizontal">
                                        <!--  MASK ICON  -->
                                        <Viewbox Height="20">
                                            <Grid>
                                                <Grid.Resources>
                                                    <SolidColorBrush x:Key="RevealBrush" Color="#fafafa" />
                                                    <SolidColorBrush x:Key="HideBrush" Color="#222" />
                                                </Grid.Resources>
                                                <Border CornerRadius="3"
                                                        BorderThickness="2"
                                                        BorderBrush="{DynamicResource Brushes.Foreground.2}"
                                                        Width="40"
                                                        Height="30">
                                                    <Border.Style>
                                                        <Style TargetType="Border">
                                                            <Setter Property="Background" Value="{StaticResource RevealBrush}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealAll}">
                                                                    <Setter Property="Background" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideSelection}">
                                                                    <Setter Property="Background" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideAll}">
                                                                    <Setter Property="Background" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealSelection}">
                                                                    <Setter Property="Background" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Border.Style>
                                                </Border>

                                                <Ellipse Width="18" Height="18">
                                                    <Ellipse.Style>
                                                        <Style TargetType="Ellipse">
                                                            <Setter Property="Fill" Value="{StaticResource HideBrush}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealAll}">
                                                                    <Setter Property="Fill" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideSelection}">
                                                                    <Setter Property="Fill" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideAll}">
                                                                    <Setter Property="Fill" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealSelection}">
                                                                    <Setter Property="Fill" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Ellipse.Style>
                                                </Ellipse>
                                            </Grid>
                                        </Viewbox>
                                        <TextBlock Text="{Binding Converter={StaticResource MaskModeToString}}"
                                                   Foreground="{DynamicResource Brushes.Foreground.1}"
                                                   VerticalAlignment="Center"
                                                   Margin="8 0" />
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </controls:ContentSettingItem>



                    <!--  UNLINK MASK  -->
                    <controls:ToggleSettingItem Header="{lex:Loc Settings_UnlinkMask}"
                                                Description="{lex:Loc Settings_UnlinkMask_Tooltip}"
                                                IsChecked="{Binding Config.UnlinkMask}"
                                                Margin="10 0 0 4"
                                                IsEnabled="{Binding Config.AddMaskToAddedLayer}">
                        <controls:ToggleSettingItem.Icon>
                            <pureUIcontrols:FontIcon Icon="&#xE71B;"
                                                     Size="18"
                                                     RenderTransformOrigin="0.5,0.5">
                                <pureUIcontrols:FontIcon.RenderTransform>
                                    <RotateTransform Angle="90" />
                                </pureUIcontrols:FontIcon.RenderTransform>
                            </pureUIcontrols:FontIcon>
                        </controls:ToggleSettingItem.Icon>
                    </controls:ToggleSettingItem>
                </StackPanel>

            </TabItem>
        </TabControl>
    </Grid>

</pureUI:PureWindow>
