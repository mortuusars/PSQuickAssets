<pure:PureWindow x:Class="PSQuickAssets.Windows.SettingsWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:lex="http://wpflocalizeextension.codeplex.com"
                 xmlns:hotkeys="clr-namespace:MGlobalHotkeys.WPF;assembly=MGlobalHotkeys.WPF"
                 xmlns:core="clr-namespace:PSQA.Core;assembly=PSQA.Core"
                 xmlns:controls="clr-namespace:PSQuickAssets.Controls"
                 xmlns:vm="clr-namespace:PSQuickAssets.ViewModels"
                 xmlns:pure="http://mortuusars.github.io/pureui"
                 xmlns:system="clr-namespace:System;assembly=mscorlib"
                 xmlns:dd="urn:gong-wpf-dragdrop"
                 xmlns:wpf="clr-namespace:PSQuickAssets.WPF"
                 lex:LocalizeDictionary.DesignCulture="en"
                 lex:ResxLocalizationProvider.DefaultAssembly="PSQuickAssets"
                 lex:ResxLocalizationProvider.DefaultDictionary="Lang"
                 mc:Ignorable="d"
                 Title="{lex:Loc Settings_WindowTitle}"
                 Width="750"
                 MinWidth="480"
                 Height="520"
                 MinHeight="200"
                 d:Height="700"
                 d:WindowStyle="None"
                 d:BorderThickness="0"
                 FontFamily="{StaticResource FontLight}"
                 Foreground="{DynamicResource Brushes.Foreground.1}"
                 DataContext="{Binding SettingsViewModel, Source={StaticResource ViewModelLocator}}"
                 d:DataContext="{d:DesignInstance Type=vm:SettingsViewModel}"
                 FocusManager.FocusedElement="{Binding ElementName=GeneralTab}">

    <pure:PureWindow.CommandBindings>
        <CommandBinding Command="ComponentCommands.MoveFocusDown" Executed="MoveFocusDown_Executed" />
    </pure:PureWindow.CommandBindings>

    <pure:PureWindow.Resources>

        <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource DarkToolTip}" />
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource SimpleTextBox}" />

        <Style TargetType="{x:Type TabControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid x:Name="templateRoot"
                              ClipToBounds="true"
                              SnapsToDevicePixels="true"
                              KeyboardNavigation.TabNavigation="Local">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="ColumnDefinition0" />
                                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                                <RowDefinition x:Name="RowDefinition1" Height="*" />
                            </Grid.RowDefinitions>

                            <TabPanel x:Name="headerPanel"
                                      Background="Transparent"
                                      Grid.Column="0"
                                      IsItemsHost="true"
                                      Grid.Row="0"
                                      Margin="0 -2 0 0"
                                      KeyboardNavigation.TabIndex="1"
                                      Panel.ZIndex="1" />

                            <Border x:Name="contentPanel"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Grid.Column="0"
                                    Grid.Row="1">

                                <ScrollViewer>
                                    <ContentPresenter x:Name="PART_SelectedContentHost"
                                                      ContentSource="SelectedContent"
                                                      Margin="{TemplateBinding Padding}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="TabStripPlacement" Value="Bottom">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Left">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                                <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                                <Setter Property="HorizontalContentAlignment" Value="Left" />
                            </Trigger>
                            <Trigger Property="TabStripPlacement" Value="Right">
                                <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                                <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                                <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                                <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                                <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                                <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                                <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                                <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                                <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.6" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TabItem}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="FontSize" Value="15" />
            <Setter Property="FontFamily" Value="{StaticResource FontRegular}" />
            <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
            <Setter Property="Background" Value="{DynamicResource Brushes.Background.1}" />
            <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Border.1}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Padding" Value="13 10 32 10" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                            <Border x:Name="mainBorder"
                                    Margin="0 2"
                                    CornerRadius="6"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" />
                            <ContentPresenter x:Name="contentPresenter"
                                              ContentSource="Header"
                                              Margin="{TemplateBinding Padding}"
                                              Focusable="False"
                                              RecognizesAccessKey="True"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
                        </Grid>

                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Background.2}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.0}" />
                            </DataTrigger>

                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Background.4}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.0}" />
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Background.3}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Accent.Background.0}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Accent.Foreground.0.Inverse}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="Background" Value="{DynamicResource Brushes.Accent.Background.0.Highlight}" />
                                <Setter Property="Foreground" Value="{DynamicResource Brushes.Accent.Foreground.0.Inverse}" />
                            </Trigger>
                        </ControlTemplate.Triggers>

                        <!--<ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56" />
                                <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="-2,-2,0,-2" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="-2,0,-2,-2" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="0,-2,-2,-2" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="1" />
                                <Setter Property="Margin" Value="-2,-2,-2,0" />
                                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
                                <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0" />
                                <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>-->
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ToggleButton" BasedOn="{StaticResource ToggleSwitch}">
            <Setter Property="UseLayoutRounding" Value="False" />
            <Setter Property="SnapsToDevicePixels" Value="False" />
            <Setter Property="Height" Value="26" />
            <Setter Property="Focusable" Value="False" />
        </Style>

        <Style x:Key="CategoryHeader" TargetType="TextBlock">
            <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="Margin" Value="0 0 0 4" />
        </Style>

        <DropShadowEffect x:Key="SettingItemShadow"
                          BlurRadius="8"
                          Direction="-90"
                          ShadowDepth="2"
                          Opacity="0.15" />

        <Style TargetType="{x:Type pure:SettingItem}" BasedOn="{StaticResource {x:Type pure:SettingItem}}">
            <Setter Property="UseLayoutRounding" Value="True" />
            <Setter Property="Background" Value="{DynamicResource Brushes.Background.1}" />
            <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
            <Setter Property="Effect" Value="{StaticResource SettingItemShadow}" />
            <Setter Property="Focusable" Value="False" />
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.4}" />
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="ToolTip" BasedOn="{StaticResource DarkToolTip}" />
            </Style.Resources>
        </Style>

        <Style TargetType="{x:Type pure:ToggleSettingItem}" BasedOn="{StaticResource {x:Type pure:ToggleSettingItem}}">
            <Setter Property="UseLayoutRounding" Value="True" />
            <Setter Property="Background" Value="{DynamicResource Brushes.Background.1}" />
            <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.1}" />
            <Setter Property="Padding" Value="14 12" />
            <Setter Property="Effect" Value="{StaticResource SettingItemShadow}" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Description.Length}" Value="0">
                    <Setter Property="Padding" Value="14 18" />
                </DataTrigger>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Brushes.Background.3}" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource Brushes.Background.2}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource Brushes.Foreground.4}" />
                </Trigger>
            </Style.Triggers>
            <Style.Resources>
                <Style TargetType="ToolTip" BasedOn="{StaticResource DarkToolTip}" />
            </Style.Resources>
        </Style>

        <!--  COMBOBOX ITEM STYLE  -->
        <Style TargetType="ComboBoxItem">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Padding" Value="10 8" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBoxItem">
                        <Border x:Name="Border" SnapsToDevicePixels="True">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource Brushes.Background.4}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <ContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Setter Property="IsTabStop" Value="False" />
                                <Setter Property="Focusable" Value="False" />
                                <Setter Property="IsHitTestVisible" Value="False" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="Background" TargetName="Border" Value="{DynamicResource Brushes.Background.4}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  COMBOBOX STYLE  -->
        <Style x:Key="ProperComboBox" TargetType="ComboBox">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Border x:Name="root" MinWidth="50">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="CornerRadius" Value="4" />
                                    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                            <Setter Property="CornerRadius" Value="4 4 0 0" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=toggleButton}" Value="true">
                                            <Setter Property="Background" Value="{DynamicResource Brushes.Background.4}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>

                                <!--  ARROW ICON  -->
                                <Viewbox Grid.Column="1"
                                         VerticalAlignment="Center"
                                         HorizontalAlignment="Center"
                                         Height="7"
                                         Margin="8"
                                         RenderTransformOrigin="0.5, 0.5">
                                    <Viewbox.RenderTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <ScaleTransform ScaleX="1" ScaleY="1" x:Name="scale" />
                                                <RotateTransform Angle="0" x:Name="rotate" />
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Viewbox.RenderTransform>
                                    <Viewbox.Style>
                                        <Style TargetType="Viewbox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsMouseOver, ElementName=root}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                                                 To="1.2" />
                                                                <DoubleAnimation Duration="0:0:0"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                                                 To="1.2" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                    <DataTrigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleX"
                                                                                 To="1" />
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[0].ScaleY"
                                                                                 To="1" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.ExitActions>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}}" Value="True">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[1].Angle"
                                                                                 To="180" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.EnterActions>
                                                    <DataTrigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0:0:0.15"
                                                                                 Storyboard.TargetProperty="RenderTransform.Children[1].Angle"
                                                                                 To="0" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </DataTrigger.ExitActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Viewbox.Style>
                                    <Path Data="M24 30.8 12 18.8 14.15 16.65 24 26.5 33.85 16.65 36 18.8Z"
                                          Fill="{DynamicResource Brushes.Foreground.1}"
                                          Stretch="Fill"
                                          UseLayoutRounding="False" />
                                </Viewbox>

                                <!--  SELECTED ITEM  -->
                                <ContentPresenter Content="{TemplateBinding SelectedItem}"
                                                  ContentTemplate="{TemplateBinding ItemTemplate}"
                                                  IsHitTestVisible="False"
                                                  Margin="{TemplateBinding Padding}" />

                                <ToggleButton IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              x:Name="toggleButton"
                                              Grid.ColumnSpan="2"
                                              Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                              VerticalAlignment="Stretch"
                                              HorizontalAlignment="Stretch">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Grid Background="Transparent" />
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>

                                <Popup x:Name="PART_Popup"
                                       IsOpen="{TemplateBinding IsDropDownOpen}"
                                       Focusable="False"
                                       AllowsTransparency="True"
                                       PopupAnimation="Slide"
                                       Placement="Bottom">

                                    <Grid x:Name="DropDown"
                                          SnapsToDevicePixels="True"
                                          MinWidth="{TemplateBinding ActualWidth}"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">

                                        <Grid.OpacityMask>
                                            <VisualBrush Visual="{Binding ElementName=DropDownBorder}" />
                                        </Grid.OpacityMask>
                                        <Border x:Name="DropDownBorder"
                                                Background="{DynamicResource Brushes.Background.3}"
                                                CornerRadius="0 0 4 4"
                                                VerticalAlignment="Stretch"
                                                HorizontalAlignment="Stretch" />

                                        <ScrollViewer SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                        </Border>

                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5" />
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" TargetName="root" Value="{DynamicResource Brushes.Background.4}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--  LISTBOX ITEM STYLE  -->
        <!--<Style x:Key="SimpleListBoxItem" TargetType="ListBoxItem">
            <Setter Property="Margin" Value="0" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border x:Name="Border"
                                CornerRadius="3"
                                SnapsToDevicePixels="true">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Style.Triggers>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Opacity" Value="0.6" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>

                            <ContentPresenter />

                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Colors.Accent.Background.0}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled" />
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualState x:Name="Unselected" />
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Colors.Accent.Background.0.Highlight}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="SelectedUnfocused">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).                     (SolidColorBrush.Color)">
                                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource Colors.Accent.Background.0}" />
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                        </Border>
                        --><!--<ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Brushes.Accent.Background.0}"/>
                                <Setter TargetName="Border" Property="BorderThickness" Value="2"/>
                            </Trigger>
                        </ControlTemplate.Triggers>--><!--
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <!--  MASK MODE VALUES PROVIDER  -->
        <ObjectDataProvider x:Key="MaskModeValues"
                            MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="core:MaskMode" />
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>


    </pure:PureWindow.Resources>

    <pure:PureWindow.Style>
        <Style TargetType="pure:PureWindow" BasedOn="{StaticResource PSQAWindow}" />
    </pure:PureWindow.Style>

    <pure:PureWindow.InputBindings>
        <KeyBinding Key="Esc" Command="{x:Static pure:WindowCommands.CloseWindow}" />
    </pure:PureWindow.InputBindings>

    <Grid>
        <!--  TITLE PREVIEW  -->
        <d:Border Background="{StaticResource Brushes.Border.0}"
                  VerticalAlignment="Top"
                  Margin="0 -32 0 0">
            <ContentPresenter Content="{StaticResource DefaultTitleBar}" />
        </d:Border>

        <TabControl x:Name="TabControl"
                    Background="Transparent"
                    BorderThickness="0"
                    TabStripPlacement="Left"
                    Padding="30 5"
                    Margin="15 15 2 0"
                    Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Control}}"
                    SelectionChanged="TabControl_SelectionChanged">

            <!--  GENERAL  -->
            <TabItem x:Name="GeneralTab">
                <TabItem.Header>
                    <pure:StackLayout Orientation="Horizontal" Spacing="8">
                        <pure:SegoeIcon Glyph="Setting" />
                        <TextBlock Text="{lex:Loc Settings_General}" />
                    </pure:StackLayout>
                </TabItem.Header>

                <StackPanel>

                    <!--  WINDOW  -->
                    <TextBlock Text="{lex:Loc Settings_Category_Window}" Style="{StaticResource CategoryHeader}" />

                    <!--  WINDOW HOTKEY  -->
                    <pure:SettingItem Header="{lex:Loc Settings_WindowOpenHotkey}"
                                      Icon="{pure:SegoeIconMarkup Glyph=KeyboardShortcut,
                                                                  Size=20}"
                                      Focusable="True"
                                      KeyDown="HotkeySettingItem_KeyDown">
                        <pure:SettingItem.Style>
                            <Style TargetType="pure:SettingItem" BasedOn="{StaticResource {x:Type pure:SettingItem}}">
                                <Style.Triggers>
                                    <Trigger Property="IsKeyboardFocused" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource Brushes.Background.3}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </pure:SettingItem.Style>
                        <Border BorderThickness="2"
                                CornerRadius="3"
                                Padding="0"
                                VerticalAlignment="Center">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderBrush" Value="Transparent" />
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Foreground.3}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>

                            <Grid>
                                <Border CornerRadius="2"
                                        Margin="0"
                                        Background="{DynamicResource Brushes.Background.4}"
                                        Effect="{StaticResource SettingItemShadow}" />
                                <hotkeys:HotkeyPicker x:Name="HotkeyPicker"
                                                      MinWidth="110"
                                                      Padding="8 5"
                                                      FontSize="13"
                                                      Margin="-2"
                                                      BorderThickness="2"
                                                      ClearFocusOnCancel="True"
                                                      ClearFocusOnClear="True"
                                                      CornerRadius="3"
                                                      IsTabStop="False"
                                                      Focusable="False"
                                                      Background="{DynamicResource Brushes.Background.3}"
                                                      Hotkey="{Binding ShowHideWindowHotkey, UpdateSourceTrigger=LostFocus}"
                                                      ToolTip="{lex:Loc Settings_HotkeyPicker_Tooltip}">
                                    <hotkeys:HotkeyPicker.Style>
                                        <Style TargetType="hotkeys:HotkeyPicker">
                                            <Style.Resources>
                                                <Style TargetType="TextBox">
                                                    <Setter Property="IsTabStop" Value="False" />
                                                </Style>
                                            </Style.Resources>
                                        </Style>
                                    </hotkeys:HotkeyPicker.Style>
                                </hotkeys:HotkeyPicker>
                            </Grid>
                        </Border>
                    </pure:SettingItem>

                    <!--  ALWAYS ON TOP  -->
                    <pure:ToggleSettingItem Header="{lex:Loc Settings_AlwaysOnTop}"
                                            Description="{lex:Loc Settings_AlwaysOnTop_Tooltip}"
                                            IsChecked="{Binding Config.AlwaysOnTop}"
                                            Icon="{pure:SegoeIconMarkup Glyph=LockscreenDesktop,
                                                                        Size=18}" />

                    <!--  HIDE WINDOW WHEN ADDING ASSET  -->
                    <pure:ToggleSettingItem Header="{lex:Loc Settings_HideWindowWhenAdding}"
                                            IsChecked="{Binding Config.HideWindowWhenAddingAsset}"
                                            Icon="{pure:SegoeIconMarkup Glyph=TabletMode,
                                                                        Size=18}" />

                    <!--  HIDE FROM TASKBAR  -->
                    <pure:ToggleSettingItem Header="{lex:Loc Settings_HideFromTaskbar}"
                                            Description="{lex:Loc Settings_HideFromTaskbar_Tooltip}"
                                            IsChecked="{Binding Config.HideIconFromTaskbar}"
                                            Icon="{pure:SegoeIconMarkup Glyph=SwitchApps,
                                                                        Size=18}" />


                    <Separator Margin="6" Opacity="0" />


                    <!--  APPLICATION  -->
                    <TextBlock Text="{lex:Loc Settings_Category_Application}" Style="{StaticResource CategoryHeader}" />

                    <pure:ToggleSettingItem Header="{lex:Loc Settings_CheckUpdates}"
                                            IsChecked="{Binding Config.CheckUpdates}"
                                            Icon="{pure:SegoeIconMarkup Glyph=DevUpdate,
                                                                        Size=18}" />

                    <pure:ToggleSettingItem Header="{lex:Loc Settings_DebugMode}"
                                            IsChecked="{Binding Config.DebugMode}"
                                            Icon="{pure:SegoeIconMarkup Glyph=Processing,
                                                                        Size=18}" />
                </StackPanel>

            </TabItem>

            <!--  APPEARANCE  -->
            <TabItem>
                <TabItem.Header>
                    <pure:StackLayout Orientation="Horizontal" Spacing="8">
                        <pure:SegoeIcon Glyph="Personalize" />
                        <TextBlock Text="{lex:Loc Settings_Appearance}" />
                    </pure:StackLayout>
                </TabItem.Header>

                <!--  THEME  -->
                <pure:SettingItem Header="{lex:Loc Settings_Theme}" Icon="{pure:MaterialIconMarkup Glyph=Format_paint, Size=18}">

                    <ComboBox Style="{StaticResource ProperComboBox}"
                              Padding="12 6"
                              Background="{DynamicResource Brushes.Background.3}"
                              ItemsSource="{Binding Themes}"
                              SelectedItem="{Binding CurrentTheme, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              SelectedIndex="0">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">

                                    <!--  DARK LIGHT ICONS  -->
                                    <pure:MaterialIcon Margin="0 1 8 0"
                                                       VerticalAlignment="Center"
                                                       Foreground="{DynamicResource Brushes.Foreground.1}">
                                        <pure:MaterialIcon.Style>
                                            <Style TargetType="pure:MaterialIcon" BasedOn="{StaticResource MaterialIconDefaultStyle}">
                                                <Setter Property="Visibility" Value="Visible" />
                                                <Setter Property="Glyph" Value="Brush" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Name}" Value="Dark">
                                                        <Setter Property="Glyph" Value="Brightness_2" />
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Name}" Value="Light">
                                                        <Setter Property="Glyph" Value="Wb_sunny" />
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </pure:MaterialIcon.Style>
                                    </pure:MaterialIcon>

                                    <!--  THEME NAME  -->
                                    <TextBlock Text="{Binding Name}" Foreground="{DynamicResource Brushes.Foreground.1}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </pure:SettingItem>
            </TabItem>

            <!--  ASSETS  -->
            <TabItem>
                <TabItem.Header>
                    <pure:StackLayout Orientation="Horizontal" Spacing="8">
                        <pure:SegoeIcon Glyph="Picture" />
                        <TextBlock Text="{lex:Loc Settings_Assets}" />
                    </pure:StackLayout>
                </TabItem.Header>

                <StackPanel>

                    <!--  MASK  -->
                    <TextBlock Text="{lex:Loc Settings_Category_Mask}" Style="{StaticResource CategoryHeader}" />

                    <!--  ADD MASK TO LAYER  -->
                    <pure:ToggleSettingItem Header="{lex:Loc Settings_AddMaskToLayer}"
                                            Icon="{pure:MaterialIconMarkup Glyph=Filter_b_and_w,
                                                                           Size=24}"
                                            IsChecked="{Binding Config.AddMaskToAddedLayer}" />

                    <!--  MASK MODE  -->
                    <pure:SettingItem Header="{lex:Loc Settings_MaskMode}"
                                      Icon="{pure:MaterialIconMarkup Glyph=Hdr_strong,
                                                                     Size=20}"
                                      IsEnabled="{Binding Config.AddMaskToAddedLayer}">
                        <ComboBox Style="{StaticResource ProperComboBox}"
                                  Background="{DynamicResource Brushes.Background.3}"
                                  Foreground="{DynamicResource Brushes.Foreground.1}"
                                  d:SelectedItem="{x:Static core:MaskMode.RevealSelection}"
                                  ItemsSource="{Binding Source={StaticResource MaskModeValues}}"
                                  SelectedItem="{Binding Config.MaskMode}"
                                  Padding="8">
                            <ComboBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type core:MaskMode}">
                                    <StackPanel Orientation="Horizontal">
                                        <!--  MASK ICON  -->
                                        <Viewbox Height="20">
                                            <Grid>
                                                <Grid.Resources>
                                                    <SolidColorBrush x:Key="RevealBrush" Color="#fafafa" />
                                                    <SolidColorBrush x:Key="HideBrush" Color="#222" />
                                                </Grid.Resources>
                                                <Border CornerRadius="3"
                                                        BorderThickness="2"
                                                        BorderBrush="{DynamicResource Brushes.Foreground.2}"
                                                        Width="40"
                                                        Height="30">
                                                    <Border.Style>
                                                        <Style TargetType="Border">
                                                            <Setter Property="Background" Value="{StaticResource RevealBrush}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealAll}">
                                                                    <Setter Property="Background" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideSelection}">
                                                                    <Setter Property="Background" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideAll}">
                                                                    <Setter Property="Background" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealSelection}">
                                                                    <Setter Property="Background" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Border.Style>
                                                </Border>

                                                <Ellipse Width="18" Height="18">
                                                    <Ellipse.Style>
                                                        <Style TargetType="Ellipse">
                                                            <Setter Property="Fill" Value="{StaticResource HideBrush}" />
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealAll}">
                                                                    <Setter Property="Fill" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideSelection}">
                                                                    <Setter Property="Fill" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.HideAll}">
                                                                    <Setter Property="Fill" Value="{StaticResource HideBrush}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding}" Value="{x:Static core:MaskMode.RevealSelection}">
                                                                    <Setter Property="Fill" Value="{StaticResource RevealBrush}" />
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Ellipse.Style>
                                                </Ellipse>
                                            </Grid>
                                        </Viewbox>
                                        <TextBlock Text="{Binding Converter={StaticResource MaskModeToString}}"
                                                   Foreground="{DynamicResource Brushes.Foreground.1}"
                                                   VerticalAlignment="Center"
                                                   Margin="8 0" />
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </pure:SettingItem>



                    <!--  UNLINK MASK  -->
                    <pure:ToggleSettingItem Header="{lex:Loc Settings_UnlinkMask}"
                                            Description="{lex:Loc Settings_UnlinkMask_Tooltip}"
                                            IsChecked="{Binding Config.UnlinkMask}"
                                            IsEnabled="{Binding Config.AddMaskToAddedLayer}">
                        <pure:ToggleSettingItem.Icon>
                            <pure:MaterialIcon Glyph="Link"
                                               FontSize="18"
                                               RenderTransformOrigin="0.5,0.5">
                                <pure:MaterialIcon.RenderTransform>
                                    <RotateTransform Angle="90" />
                                </pure:MaterialIcon.RenderTransform>
                            </pure:MaterialIcon>
                        </pure:ToggleSettingItem.Icon>
                    </pure:ToggleSettingItem>

                    <Separator Margin="6" Opacity="0" />

                    <!--  ACTIONS  -->
                    <TextBlock Text="{lex:Loc Settings_Category_Actions}" Style="{StaticResource CategoryHeader}" />

                    <!--  EXECUTE ON PLACE  -->
                    <pure:ToggleSettingItem Header="{lex:Loc Setting_ExecuteActionsPostPlace}"
                                            IsChecked="{Binding Config.ExecuteActionsAfterAdding}"
                                            Icon="{pure:SegoeIconMarkup Glyph=PlaySolid,
                                                                        Size=17}" />

                    <pure:SettingItem HorizontalAlignment="Right"
                                      Padding="0"
                                      IsEnabled="{Binding Config.ExecuteActionsAfterAdding}">
                        <Grid DataContext="{Binding PhotoshopViewModel, Source={StaticResource ViewModelLocator}}" Margin="16 14">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>

                            <ListBox ItemsSource="{Binding PostActions}"
                                     Background="{DynamicResource Brushes.Background.3}"
                                     Foreground="{DynamicResource Brushes.Foreground.1}"
                                     dd:DragDrop.IsDragSource="True"
                                     dd:DragDrop.IsDropTarget="True"
                                     Grid.Column="0"
                                     MaxHeight="120"
                                     MinWidth="150"
                                     MaxWidth="400"
                                     Padding="2"
                                     KeyboardNavigation.AcceptsReturn="True"
                                     Visibility="{Binding PostActions.Count, Converter={pure:ValueToVisibilityConverter Value=0, VisibilityEqual=Collapsed, VisibilityNotEqual=Visible}}">
                                <ListBox.InputBindings>
                                    <KeyBinding Key="Delete"
                                                Command="{Binding PhotoshopViewModel.PostActionsViewModel.RemoveActionCommand, Source={StaticResource ViewModelLocator}}"
                                                CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}}" />
                                </ListBox.InputBindings>
                                <ListBox.ItemContainerStyle>
                                    <Style TargetType="{x:Type ListBoxItem}">
                                        <Setter Property="BorderThickness" Value="1" />
                                        <Setter Property="Margin" Value="0" />
                                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                        <Setter Property="Padding" Value="0" />
                                        <Style.Resources>
                                            <Style TargetType="Border">
                                                <Setter Property="CornerRadius" Value="3" />
                                                <Setter Property="BorderThickness" Value="0" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                        <Setter Property="BorderThickness" Value="2"/>
                                                        <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Accent.Background.0}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Style.Resources>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="True">
                                                <Setter Property="BorderThickness" Value="1"/>
                                                <Setter Property="BorderBrush" Value="{DynamicResource Brushes.Accent.Background.0}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListBox.ItemContainerStyle>
                                <ListBox.Style>
                                    <Style TargetType="{x:Type ListBox}">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ListBox}">
                                                    <Border CornerRadius="4"
                                                            BorderThickness="0"
                                                            Background="{TemplateBinding Background}"
                                                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}">

                                                        <ScrollViewer 
                                                                      HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                                                      Margin="{TemplateBinding Padding}">
                                                            <StackPanel Margin="2" IsItemsHost="True" />
                                                        </ScrollViewer>

                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.7" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ListBox.Style>
                                <d:ListBox.ItemsSource>
                                    <x:Array Type="{x:Type core:PhotoshopAction}">
                                        <core:PhotoshopAction Action="SelectLayer" Set="Set1" />
                                        <core:PhotoshopAction Action="AdjustSaturation" Set="Set2" />
                                        <core:PhotoshopAction Action="BoostContrast" Set="Set3" />
                                    </x:Array>
                                </d:ListBox.ItemsSource>
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Background="Transparent"
                                              HorizontalAlignment="Stretch"
                                              Margin="6 2">
                                            <Grid.ContextMenu>
                                                <ContextMenu>
                                                    <MenuItem Header="{lex:Loc PSQuickAssets:Lang:Remove}"
                                                              Command="{Binding PhotoshopViewModel.PostActionsViewModel.RemoveActionCommand, Source={StaticResource ViewModelLocator}}"
                                                              CommandParameter="{Binding}">
                                                        <MenuItem.Icon>
                                                            <pure:FontIcon Glyph="{x:Static pure:SegoeGlyph.Delete}"
                                                                           Foreground="{DynamicResource Brushes.Utility.Error}"
                                                                           FontSize="18" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                </ContextMenu>
                                            </Grid.ContextMenu>
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                                <TextBlock Text="{Binding Action}" Foreground="{DynamicResource Brushes.Accent.Background.0.Highlight}" />
                                                <pure:FontIcon Glyph="{x:Static pure:SegoeGlyph.PaginationDotSolid10}"
                                                               FontSize="5"
                                                               Margin="6 0 6 -2" />
                                                <TextBlock Text="{Binding Set}" />
                                            </StackPanel>
                                        </Grid>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>

                            <!--  ADD ACTION  -->
                            <Button Grid.Column="1"
                                    Margin="10 0 0 0"
                                    VerticalAlignment="Top"
                                    HorizontalAlignment="Center"
                                    Padding="8"
                                    Content="{pure:SegoeIconMarkup Glyph=AddBold,
                                                                   Size=12}"
                                    Command="{Binding PostActionsViewModel.ToggleAddingModeCommand}"
                                    ToolTip="{lex:Loc Actions_AddAction}"
                                    Style="{StaticResource GeneralButton}" />

                        </Grid>
                    </pure:SettingItem>



                    <!--  ADD ACTION POPUP  -->
                    <Popup x:Name="AddingActionPopup"
                           DataContext="{Binding PhotoshopViewModel, Source={StaticResource ViewModelLocator}}"
                           IsOpen="{Binding PostActionsViewModel.AddingMode}"
                           StaysOpen="False"
                           AllowsTransparency="True"
                           Focusable="True"
                           Placement="MousePoint"
                           PopupAnimation="Fade"
                           VerticalOffset="-50"
                           HorizontalOffset="-205"
                           Opened="AddingActionPopup_Opened">

                        <Popup.InputBindings>
                            <KeyBinding Key="Esc" Command="{Binding PostActionsViewModel.ExitAddingModeCommand}" />
                        </Popup.InputBindings>

                        <Grid Margin="30">

                            <!--  BACKGROUND  -->
                            <Border Background="{DynamicResource Brushes.Background.2}"
                                    CornerRadius="5"
                                    BorderThickness="1"
                                    BorderBrush="#222">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="26"
                                                      ShadowDepth="1"
                                                      Direction="-90"
                                                      Opacity="0.3" />
                                </Border.Effect>
                            </Border>

                            <StackPanel Orientation="Horizontal" Margin="8">
                                <TextBlock Text="{lex:Loc Actions_Name}"
                                           VerticalAlignment="Center"
                                           Margin="8 0" />
                                <!--  ACTION  -->
                                <TextBox x:Name="AddingActionNameBox"
                                         Text="{Binding PostActionsViewModel.Action, UpdateSourceTrigger=PropertyChanged}"
                                         VerticalAlignment="Center"
                                         Width="120">
                                    <TextBox.InputBindings>
                                        <KeyBinding Key="Return" Command="ComponentCommands.MoveFocusDown" />
                                    </TextBox.InputBindings>
                                </TextBox>

                                <TextBlock Text="{lex:Loc Actions_Set}"
                                           VerticalAlignment="Center"
                                           Margin="12 0 8 0" />
                                <!--  SET  -->
                                <TextBox x:Name="AddingActionSetBox"
                                         Text="{Binding PostActionsViewModel.Set, UpdateSourceTrigger=PropertyChanged}"
                                         VerticalAlignment="Center"
                                         Width="120">
                                    <TextBox.InputBindings>
                                        <KeyBinding Key="Return" Command="{Binding PostActionsViewModel.AddActionCommand}" />
                                    </TextBox.InputBindings>
                                </TextBox>

                                <Button x:Name="AddingActionAddButton"
                                        Padding="4"
                                        Margin="8 0 0 0"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Right"
                                        Content="{pure:SegoeIconMarkup Glyph=CheckMark,
                                                                       Size=15}"
                                        Style="{StaticResource AccentButton}"
                                        Command="{Binding PostActionsViewModel.AddActionCommand}" />
                            </StackPanel>
                        </Grid>
                    </Popup>

                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>

</pure:PureWindow>
